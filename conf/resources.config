//define max for resources (expected to be overwritten)
params {
    max_cpus = 28
    max_memory = 115.GB
    max_time = 48.h
}

process {

    // Capture exit codes from upstream processes when piping

    shell = ['/usr/bin/env bash', '-euo', 'pipefail']

    // default for all tasks
    cpus = { check_max( 1 * task.attempt, 'cpus' ) }
    memory = { check_max( 15.GB * task.attempt, 'memory' ) }
    time = { check_max( 30.m * task.attempt, 'time' ) }
    errorStrategy = { task.exitStatus in [143,137,104,134,139] ? 'retry' : 'finish' }
    maxRetries = 3
    maxErrors = '-1'

    withLabel: multithreads { 
        cpus = { check_max( 5, 'cpus' ) }
    }

    withLabel: highRAM {
        cpus = { check_max( 6, 'cpus' ) }
        memory = { check_max( 115.GB * task.attempt, 'memory' ) }
        time = { check_max( 1.h * task.attempt, 'time' ) }
    }

    withLabel: medRAM {
        cpus = { check_max( 5, 'cpus' ) }
        memory = { check_max( 30.GB * task.attempt, 'memory' ) }
        time = { check_max( 3.h * task.attempt, 'time' ) }
    }

    withName: q2_dada2 {
        cpus = { check_max( 5, 'cpus' ) }
        memory = { check_max( 30.GB * task.attempt, 'memory' ) } 
        time = { check_max( 3.h * task.attempt, 'time' ) }
    }

    withName: nanopore_mapping {
        cpus = { check_max( 12, 'cpus' ) }
        memory = { check_max( 15.GB * task.attempt, 'memory' ) }
        time = { check_max( 1.h * task.attempt, 'time' ) }
    }

    withName: nanopore_phyloseq_obj {
        memory = { check_max( 10.GB * task.attempt, 'memory' ) }
        time = { check_max( 4.h * task.attempt, 'time' ) }
    }

   withName : agglomerate_phyloseq {
        memory = { check_max( 60.GB * task.attempt, 'memory' ) }
        time = { check_max( 2.h * task.attempt, 'time' ) }
   }

}
