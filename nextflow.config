// Load processes parameters
includeConfig 'conf/base.config'
// Load resources configuration
includeConfig 'conf/resources.config'


// Export Time Zone required for QIIME2 2022.02
env {
  TZ = 'Europe/Paris'
}

manifest {
    name = 'samba'
    author = 'IFREMER-IRSI-SeBiMER'
    description = 'Standardized and Automated MetaBarcoding Analyses workflow developped by Ifremer SeBiMER team'
    homePage = 'https://github.com/ifremer-bioinformatics/samba'
    mainScript = 'main.nf'
    nextflowVersion = '>=22.10.0'
    version = 'v4.0.0'
}

// Define env variable that will be accessible in nextflow tasks
env {
    WDir = "${SCRATCH}"
}


// Execution profiles
profiles {
    shortreadstest { 
        includeConfig 'conf/shortreadstest.config'
        includeConfig 'conf/reports.config'
        // Workdir for temporary data
        workDir = "$env.WDir/samba_workdir/$params.projectName"
    }
    longreadstest {
        includeConfig 'conf/longreadstest.config'
        includeConfig 'conf/reports.config'
        // Workdir for temporary data
        workDir = "$env.WDir/samba_workdir/$params.projectName"
    }
    custom {
        includeConfig 'conf/custom.config'
        includeConfig 'conf/reports.config'
        // Workdir for temporary data
        workDir = "$env.WDir/samba_workdir/$params.projectName"
    }
    singularity {
        docker.enabled = false
        singularity.autoMounts = true
        singularity.enabled = true
        process {
            withLabel : biopython {
                container = "sebimer/samba-v4-biopython:1.79"
            }
        }
    }
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if (type == 'memory') {
    try {
      if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'time') {
    try {
      if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'cpus') {
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
